

var str = 'string'; // это строчный тип данных
var NUMBER_2333 = 125.7; // это числовой тип данных
var boolean = true; // это логический тип данный или еще как его иногда называют булевый
var someVar;
console.log(false + 1); //1
console.log(someVar); // undefined - специальный тип данных, который означает значение не присвоено

console.log(typeof NUMBER_2333); // number
console.log(typeof str); // строка
var testVar = typeof NUMBER_2333; // number
console.log(typeof testVar); // строка

somevar = null; // это специальный тип данных - NULL им  

var file = null;

// примитивы это - строка, число, логический тип, null и undefined
// Так же есть специальные значения NaN , Infinity - они не являются примитивами!!!!
// do something file = 'url';

console.log(file);

// object - это ссылочный тип данных , все что не является примтивным типом...
// является объектом(за иключением NaN, Infinity - которые не являются типами, а спец. значениями)
var myObj1 = {
    name: 'Alex'
};
// Это ключ - замок...такую конструкцию называют ассоциативным массивом... thank you -> спасибо
var garderob = {
    "nomerok1": "kurtka",
    "nomerok2" : "palto",
    "nomerok3": "shapka"
};
var dictionary = {
    "cat": "кошка",
    "dog": "собака",
    "car": "машина",
    "star": null
}
var account = {
    "username": "alex",
    "city": "kiev",
    "age": 32,
    "isMarried": false
}
console.log(dictionary['cat']);
console.log(dictionary['star']);
console.log(dictionary);
console.log(typeof garderob);
console.log()

var newObj = myObj1; // присваеваем новому объекту newObj в качестве значения ссылку на заранее созданный объект myObj1

newObj.name = 'Vova'; // изменяем у нового объекта newObj свойство(property на англ.) name 
console.log(myObj1); // выводим старый объект на консоль и видим, что мы изменили имя у нового объекта newObj, но вместе с этим и изменилось

// свойство name у объекта myObj1
// Аналогия... переменная это номерок... значение переменной это одежда которая висит в гардеробе.
// Когда вы объявляете переменную вы берете номерок, когда записываете в нее значение...это аналогично тому, что вы вешаете куртку 
// в гардероб( в нашем случае гардероб это память компьютера). Когда вы работаете со значением(value англ.) переменной
// вы показываете гардеробщику(компьютеру) номер и он дает вам одежду(значение переменной)
// Если же говорить о примитивах, то примитив это когда у вас 1 номерок всегда указывает на 1 куртку...
// Если вы присваиваете какой то переменной новое значение...то это тоже самое, что вы скажите гардеробщику...
// что номерку 45 соответсвует новая куртка, Т.е. старое значение попросту удаляется из памяти
// В случае ссылочных типов... у вас тоже есть номерок(имя переменной) и значение(одежда)
// Но если вы новому номерку (переменной) присвоите ( = ) , в качестве значения другой номерок ( который ссылается на куртку в гардеробе)
// То новый номерок тоже будет ссылатья на ту же самую куртку в гардеробе. Т.е. у вас будет два номерка и по любому из них вам гардеробщик вернет куртку
// Это очень существенная разница между примитивами и ссылочными типами. И дальше я вам покажу
// Как это используется на практике, и почему это важно понимать. Когда мы будем говорить о утечках памяти и там это все нам пригодится.

console.log(typeof myObj1); // ключевое слово typeof возвращает тип переменной

var myObj2 = Object.create(myObj1);
console.log(myObj2);
console.log(myObj2.name);
console.log(myObj1);


var str1 = 'Hello';
var num = 123;

var boolean1 = false;
var obj = {
    a: 1
};

// property или свойство объекта иногда их называют fields - поля объекта
var user = {
    name: 'Alex',
    surname: 'Besarab',
    age: 33,
    married: false,
};


var num = 1;
var boolean = false;
var newVar = Number(boolean);
var newVar2 = String(boolean);
console.log(typeof newVar);
console.log(typeof newVar2);
console.log(str1 + boolean); // true всегда приводится к числу 1, false всегда приводится к числу 0